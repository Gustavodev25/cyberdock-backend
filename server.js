// /server.js

// Carrega as vari√°veis de ambiente do arquivo .env, se houver
require('dotenv').config();

const express = require('express');
const cors = require('cors');
// O 'body-parser' foi removido, pois sua funcionalidade agora √© nativa do Express.

// Importa o arquivo principal de rotas
const mainRouter = require('./router');
// Importa a fun√ß√£o de inicializa√ß√£o do banco de dados
const { initializeDatabase } = require('./utils/init-db');
// Importa a nova fun√ß√£o para iniciar o Ngrok
const { startNgrok } = require('./ngrok');

const app = express();

// Configura√ß√£o do CORS
app.use(cors());

// --- CORRE√á√ÉO APLICADA AQUI ---
// Configura o middleware nativo do Express para interpretar o corpo das requisi√ß√µes como JSON.
// Isso substitui o 'body-parser'.
app.use(express.json());

// Usa o roteador principal para todas as requisi√ß√µes que come√ßarem com /api
app.use('/api', mainRouter);

const PORT = process.env.PORT || 3001;

// A fun√ß√£o de callback do app.listen agora √© ass√≠ncrona
app.listen(PORT, async () => {
  // Primeiro, inicializa o banco de dados e espera a conclus√£o
  await initializeDatabase();

  // Depois, informa que o servidor est√° a ser executado
  console.log(`üöÄ Servidor backend a ser executado na porta ${PORT}`);

  // Inicia o Ngrok apenas se n√£o estiver em ambiente de produ√ß√£o
  if (process.env.NODE_ENV !== 'production') {
    const ngrokUrl = await startNgrok();
    if (ngrokUrl) {
      console.log(`‚úÖ Ngrok a ser executado: ${ngrokUrl}`);
    } else {
      console.log('‚ö†Ô∏è Ngrok n√£o foi iniciado. Verifique o authtoken ou a conex√£o.');
    }
  }
});
